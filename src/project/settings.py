"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from corsheaders.defaults import default_headers
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG", "1") == "1"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",") if not DEBUG else []  # type: ignore[union-attr]
FRONTEND_URL = os.getenv("FRONTEND_URL") if not DEBUG else "http://localhost:5173/"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "drf_spectacular",
    "accounts",
    "autotrips",
    "telegram_bot",
    "sslserver",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = [
    "https://workshop-garage.ru",
    "https://crm.workshop-garage.ru",
    "http://localhost:5173",
    "https://localhost:5173",
]
CORS_ALLOW_HEADERS = (
    *default_headers,
    "x-vehicle-status",
)

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST", "localhost"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

AUTH_USER_MODEL = "accounts.User"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
}

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Europe/Moscow"
USE_I18N = True
USE_TZ = True

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MAX_UPLOAD_SIZE = 5242880  # 5 MB
DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=55),
    "REFRESH_TOKEN_LIFETIME": timedelta(weeks=48),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(hours=1),
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Autotrips",
    "DESCRIPTION": "API documentation for Autotrips",
    "SERVE_INCLUDE_SCHEMA": False,
    "SECURITY": [{"Authentication": []}],
}

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_GROUP_CHAT_ID = os.getenv("TELEGRAM_GROUP_CHAT_ID")

TABLE_ID = os.getenv("TABLE_ID", "")
CRM_TABLE_ID = os.getenv("CRM_TABLE_ID", "")
TABLE_CREDS = os.getenv("TABLE_CREDS", "")
VINS_WORKSHEET = os.getenv("VINS_WORKSHEET", "\u0411\u0430\u0437\u0430 VIN")
CHECKER_WORKSHEET = os.getenv(
    "CHECKER_WORKSHEET", "\u0411\u0430\u0437\u0430 \u043f\u0440\u0438\u0435\u043c\u0449\u0438\u043a\u043e\u0432"
)
REPORTS_WORKSHEET = os.getenv(
    "REPORTS_WORKSHEET", "\u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0430\u0432\u0442\u043e 2"
)
CLIENTS_WORKSHEET = os.getenv(
    "CLIENTS_WORKSHEET", "\u0411\u0430\u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432"
)
VEHICLES_WORKSHEET = os.getenv("VEHICLES_WORKSHEET", "\u0417\u0430\u044f\u0432\u043a\u0438 \u043d\u0430 \u0422\u0421")

# ADMIN INFO
ADMIN_FULLNAME = os.getenv("ADMIN_FULLNAME")
ADMIN_PHONE = os.getenv("ADMIN_PHONE")
ADMIN_TELEGRAM = os.getenv("ADMIN_TELEGRAM")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
