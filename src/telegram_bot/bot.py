import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery as CallbackQueryType
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from django.conf import settings
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from django.utils import timezone

from accounts.models import User
from services.table_service import table_manager

WORKSHEET = settings.CHECKER_WORKSHEET
logger = logging.getLogger(__name__)
try:
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
except Exception as e:  # noqa: BLE001
    bot = None
    logger.warning(f"Bot is disabled. Telegram bot configuration error: {e} ")
dp = Dispatcher()


class PasswordResetStates(StatesGroup):
    confirm_reset = State()
    enter_new_password = State()


def get_password_reset_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è")]],
        resize_keyboard=True,
        selective=True
    )


def get_main_keyboard(user: User) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if user.role in [User.Roles.ADMIN, User.Roles.MANAGER]:
        buttons.append([KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")])

    # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º ID
    if user.tg_user_id:
        buttons.append([KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")])

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ –µ—Å–ª–∏ ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    if not user.tg_user_id:
        buttons.append([KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID")])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        selective=True
    )


def get_unauthorized_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID")]],
        resize_keyboard=True,
        selective=True
    )


@dp.message(CommandStart())
async def start_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É ID
        user = await asyncio.to_thread(
            User.objects.get,
            tg_user_id=message.from_user.id
        )
        keyboard = get_main_keyboard(user)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except User.DoesNotExist:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = get_unauthorized_keyboard()
        await message.answer(
            "üîë –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID:",
            reply_markup=keyboard
        )


@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É")
async def send_test_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    try:
        user = await asyncio.to_thread(
            User.objects.get,
            tg_user_id=message.from_user.id
        )

        if user.role not in [User.Roles.ADMIN, User.Roles.MANAGER]:
            raise PermissionError

        await bot.send_message(
            chat_id=settings.TELEGRAM_GROUP_CHAT_ID,
            text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")

    except User.DoesNotExist:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
    except PermissionError:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")


@dp.message(F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID")
async def bind_tg_user_id(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID"""
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram username
        user = await asyncio.to_thread(
            User.objects.get,
            telegram=message.from_user.username
        )

        if user.tg_user_id:
            await message.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!")
            return

        user.tg_user_id = message.from_user.id
        await asyncio.to_thread(user.save)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
            reply_markup=get_main_keyboard(user)
        )

    except User.DoesNotExist:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except IntegrityError:
        await message.answer("‚ùå –≠—Ç–æ—Ç Telegram ID —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")


@dp.message(F.text == "–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")
async def start_password_reset(message: Message, state: FSMContext):
    try:
        user = await asyncio.to_thread(
            User.objects.get,
            tg_user_id=message.from_user.id
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if not user.tg_user_id:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Telegram ID",
                reply_markup=get_main_keyboard(user)
            )
            return

        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(PasswordResetStates.confirm_reset)

    except User.DoesNotExist:
        await message.answer(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω!",
            reply_markup=get_unauthorized_keyboard()
        )


@dp.message(PasswordResetStates.confirm_reset, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_reset_confirmation(message: Message, state: FSMContext):
    user = await asyncio.to_thread(
        User.objects.get,
        tg_user_id=message.from_user.id
    )

    if message.text == "–ù–µ—Ç":
        await message.answer(
            "‚ùå –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard(user) if user else get_unauthorized_keyboard()
        )
        await state.clear()
        return

    await message.answer(
        "üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=get_password_reset_keyboard()
    )
    await state.set_state(PasswordResetStates.enter_new_password)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
@dp.message(PasswordResetStates.enter_new_password)
async def process_new_password(message: Message, state: FSMContext):
    user = await asyncio.to_thread(
        User.objects.get,
        tg_user_id=message.from_user.id
    )

    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è":
        await message.answer(
            "‚ùå –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard(user) if user else get_unauthorized_keyboard()
        )
        await state.clear()
        return

    new_password = message.text.strip()

    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è Django
        await asyncio.to_thread(validate_password, new_password, user=user)
    except ValidationError as e:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ä—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        error_messages = []
        for error in e.error_list:
            if error.code == 'password_too_short':
                error_messages.append("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
            elif error.code == 'password_entirely_numeric':
                error_messages.append("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä")
            elif error.code == 'password_too_common':
                error_messages.append("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω")
            elif error.code == 'password_too_similar':
                error_messages.append("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            else:
                error_messages.append(f"‚ùå {error.message}")

        await message.answer("\n".join(error_messages))
        return

    try:
        await asyncio.to_thread(user.set_password, new_password)
        await asyncio.to_thread(user.save)

        await message.answer(
            "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
            reply_markup=get_main_keyboard(user)
        )

    except Exception as e:
        logger.error(f"Password reset error: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è",
            reply_markup=get_main_keyboard(user) if user else get_unauthorized_keyboard()
        )
    finally:
        await state.clear()


@dp.callback_query(F.data.startswith("accept:"))
async def accept_callback(callback_query: CallbackQueryType) -> None:
    try:
        user_id = int(callback_query.data.split(":")[1])  # type: ignore[union-attr]
        user = await asyncio.to_thread(User.objects.get, id=user_id)
        if not user.is_approved:
            clicker_telegram = callback_query.from_user.username
            try:
                clicker_user = await asyncio.to_thread(User.objects.get, telegram=clicker_telegram)
                if clicker_user.role in ["admin", "manager"]:
                    user.is_approved = True
                    accept_datetime = timezone.now().strftime("%Y-%m-%d %H:%M")
                    documents_url = f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã: api/v1/account/users/{user_id}/documents"  # front url
                    data = [accept_datetime, user.full_name, user.phone, user.telegram, documents_url]
                    table_manager.append_row(WORKSHEET, data)
                    await asyncio.to_thread(user.save)
                    await callback_query.answer()
                    await callback_query.message.edit_text(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç")  # type: ignore[union-attr]
                else:
                    await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")  # noqa: RUF001
            except User.DoesNotExist:
                await callback_query.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        else:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç")
    except Exception as e:  # noqa: BLE001
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

@dp.callback_query(F.data.startswith("reject:"))
async def reject_callback(callback_query: CallbackQueryType) -> None:
    try:
        user_id = int(callback_query.data.split(":")[1])  # type: ignore[union-attr]
        user = await asyncio.to_thread(User.objects.get, id=user_id)
        if user.is_active:
            clicker_telegram = callback_query.from_user.username
            try:
                clicker_user = await asyncio.to_thread(User.objects.get, telegram=clicker_telegram)
                if clicker_user.role in ["admin", "manager"]:
                    user.is_active = False
                    await asyncio.to_thread(user.save)
                    await callback_query.answer()
                    await callback_query.message.edit_text(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")  # type: ignore[union-attr]
                else:
                    await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")  # noqa: RUF001
            except User.DoesNotExist:
                await callback_query.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        else:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    except Exception:  # noqa: BLE001
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@dp.callback_query(F.data.startswith("process_report:"))
async def process_report_callback(callback: CallbackQueryType):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await asyncio.to_thread(User.objects.get, tg_user_id=callback.from_user.id)
        if user.role not in [User.Roles.ADMIN, User.Roles.MANAGER]:
            return await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(
            text=f"‚úÖ {callback.message.text}\n\nüõ† *–û–±—Ä–∞–±–æ—Ç–∞–ª*: @{callback.from_user.username}",
            parse_mode="Markdown",
            reply_markup=None
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error processing report: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")